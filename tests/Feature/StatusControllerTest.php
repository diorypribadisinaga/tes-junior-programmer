<?php

namespace Tests\Feature;

use App\Models\Status;
use Database\Seeders\StatusSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class StatusControllerTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::table('status')->delete();
    }

    public function testViewStatus(): void
    {
        $response = $this->get('/status');

        $response->assertStatus(200);
        $response->assertViewIs('status');
        $response->assertViewHas('title');
        $response->assertViewHas('status');
    }

    public function testSaveStatusSuccess()
    {
        $response = $this->post('/status', [
            'nama_status' => 'Status Baru'
        ]);

        $response->assertStatus(302);
        $response->assertRedirect('/status');
        $response->assertSessionHas('success','Status berhasil ditambahkan');
    }

    public function testSaveStatusFailedValidation()
    {
        $response = $this->post('/status', [
            'nama_status' => ''
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_status']);
    }

    public function testSaveStatusFailedUnique()
    {
        $this->seed([StatusSeeder::class]);
        $status = Status::query()->first();

        $response = $this->post('/status', [
            'nama_status' => $status->nama_status
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_status']);
    }


    public function testEditStatusSuccess()
    {
        $this->seed([StatusSeeder::class]);
        $status = Status::query()->first();
        $response = $this->put("/status/{$status->id_status}/edit", [
            'nama_status' => 'Status Edit'
        ]);

        $response->assertStatus(302);
        $response->assertRedirect('/status');
        $response->assertSessionHas('success','Status berhasil diubah');
    }

    public function testEditStatusFailedNotFound()
    {
        $response = $this->put("/status/3232/edit", [
            'nama_status' => 'Status Edit'
        ]);

        $response->assertStatus(302);
        $response->assertRedirect('/status');
        $response->assertSessionHas('error','Status tidak ditemukan');
    }

    public function testEditStatusFailedUnique()
    {
        $this->seed([StatusSeeder::class]);
        $status = Status::query()->first();

        $response = $this->put("/status/{$status->id_status}/edit", [
            'nama_status' => $status->nama_status
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_status']);
    }

    public function testDeleteStatusSuccess()
    {
        $this->seed([StatusSeeder::class]);
        $status = Status::query()->first();
        $response = $this->delete("/status/{$status->id_status}/delete");

        $response->assertStatus(302);
        $response->assertRedirect('/status');
        $response->assertSessionHas('success','Status berhasil dihapus');
    }


    public function testDeleteStatusFailedNotFound()
    {
        $response = $this->delete("/status/4343/delete");

        $response->assertStatus(302);
        $response->assertRedirect('/status');
        $response->assertSessionHas('error','Status tidak ditemukan');
    }

}
