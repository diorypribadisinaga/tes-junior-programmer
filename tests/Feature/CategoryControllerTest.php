<?php

namespace Tests\Feature;

use App\Models\Kategori;
use Database\Seeders\KategoriSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use PHPUnit\Framework\Attributes\DataProvider;
use Tests\TestCase;

class CategoryControllerTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::table('kategori')->delete();
    }

    public function testViewCategories()
    {
        $response = $this->get('/categories');
        $response->assertStatus(200);
        $response->assertViewIs('categories');
        $response->assertViewHas('title','Kategori');
    }

    public function testSaveCategorySuccess()
    {
        $response = $this->post('/categories',[
            'nama_kategori' => 'Kategori Baru'
        ]);

        $response->assertStatus(302);
        $response->assertRedirect('/categories');
        $response->assertSessionHas('success','Kategori berhasil ditambahkan');
    }

    public static function dataFailedCategory():array
    {
        return [
            ['nama_kategori' => ''],
            ['nama_kategori' => true],
            ['nama_kategori' => 2323],
        ];
    }

    #[DataProvider('dataFailedCategory')]
    public function testSaveCategoryFailedValidation($nama_kategori)
    {
        $response = $this->post('/categories',[
            'nama_kategori' => $nama_kategori
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_kategori']);
    }

    public function testSaveCategoryFailedUnique()
    {
        $this->seed([KategoriSeeder::class]);
        $kategori = Kategori::query()->first();

        $response = $this->post('/categories',[
            'nama_kategori' => $kategori->nama_kategori
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_kategori']);
    }

    public function testEditCategorySuccess()
    {
        $this->seed([KategoriSeeder::class]);
        $kategori = Kategori::query()->first();

        $response = $this->put("/categories/{$kategori->id_kategori}/edit",[
            'nama_kategori' => 'Kategori Edit'
        ]);

        $response->assertRedirect('/categories');
        $response->assertSessionHas('success','Kategori berhasil diubah');
    }

    public function testEditCategoryFailedNotFound()
    {
        $response = $this->put("/categories/3243/edit",[
            'nama_kategori' => 'Kategori Edit'
        ]);

        $response->assertRedirect('/categories');
        $response->assertSessionHas('error','Kategori tidak ditemukan');
    }

    #[DataProvider('dataFailedCategory')]
    public function testEditCategoryFailedValidation($nama_kategori)
    {
        $this->seed([KategoriSeeder::class]);
        $kategori = Kategori::query()->first();

        $response = $this->put("/categories/{$kategori->id_kategori}/edit",[
            'nama_kategori' => $nama_kategori
        ]);

        $response->assertStatus(302);
        $response->assertSessionHas('errors');
        $response->assertSessionHasErrors(['nama_kategori']);
    }

    public function testDeleteCategorySuccess()
    {
        $this->seed([KategoriSeeder::class]);
        $kategori = Kategori::query()->first();

        $response = $this->delete("/categories/{$kategori->id_kategori}/delete");

        $response->assertRedirect('/categories');
        $response->assertSessionHas('success','Kategori berhasil dihapus');
    }

    public function testDeleteCategoryFailedNotFound()
    {
        $response = $this->delete("/categories/3232/delete");

        $response->assertRedirect('/categories');
        $response->assertSessionHas('error','Kategori tidak ditemukan');
    }

    public function testDetailCategorySuccess()
    {
        $this->seed([KategoriSeeder::class]);
        $kategori = Kategori::query()->first();

        $response = $this->get("/categories/{$kategori->id_kategori}/detail");

        $response->assertStatus(200);
        $response->assertViewIs('detail_category');
        $response->assertViewHas('title','Detail Kategori: '.$kategori->nama_kategori);
        $response->assertViewHas('products');
    }

    public function testDetailCategoryFailedNotFound()
    {
        $response = $this->get("/categories/43/detail");

        $response->assertStatus(302);
        $response->assertRedirect('/categories');
        $response->assertSessionHas('error','Kategori tidak ditemukan');
    }
}
